//
// Generated file, do not edit! Created by opp_msgtool 6.0 from physicallayer/radio/base/SignalDescriptor.msg.
//

#ifndef __SIGNALDESCRIPTOR_M_H
#define __SIGNALDESCRIPTOR_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class SignalDescriptor;
/**
 * Class generated from <tt>physicallayer/radio/base/SignalDescriptor.msg:16</tt> by opp_msgtool.
 * <pre>
 * packet SignalDescriptor
 * {
 *     double positionX;
 *     double positionY;
 *     double carrierFrequency;
 *     double bandwidth;
 *     double transmitterPowerMW;
 *     double transmitterGainMW;
 * 
 *     double rssiMW;
 * 
 *     int idSrc;
 *     int idSeq;
 * }
 * </pre>
 */
class SignalDescriptor : public ::omnetpp::cPacket
{
  protected:
    double positionX = 0;
    double positionY = 0;
    double carrierFrequency = 0;
    double bandwidth = 0;
    double transmitterPowerMW = 0;
    double transmitterGainMW = 0;
    double rssiMW = 0;
    int idSrc = 0;
    int idSeq = 0;

  private:
    void copy(const SignalDescriptor& other);

  protected:
    bool operator==(const SignalDescriptor&) = delete;

  public:
    SignalDescriptor(const char *name=nullptr, short kind=0);
    SignalDescriptor(const SignalDescriptor& other);
    virtual ~SignalDescriptor();
    SignalDescriptor& operator=(const SignalDescriptor& other);
    virtual SignalDescriptor *dup() const override {return new SignalDescriptor(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);

    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);

    virtual double getCarrierFrequency() const;
    virtual void setCarrierFrequency(double carrierFrequency);

    virtual double getBandwidth() const;
    virtual void setBandwidth(double bandwidth);

    virtual double getTransmitterPowerMW() const;
    virtual void setTransmitterPowerMW(double transmitterPowerMW);

    virtual double getTransmitterGainMW() const;
    virtual void setTransmitterGainMW(double transmitterGainMW);

    virtual double getRssiMW() const;
    virtual void setRssiMW(double rssiMW);

    virtual int getIdSrc() const;
    virtual void setIdSrc(int idSrc);

    virtual int getIdSeq() const;
    virtual void setIdSeq(int idSeq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SignalDescriptor& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SignalDescriptor& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline SignalDescriptor *fromAnyPtr(any_ptr ptr) { return check_and_cast<SignalDescriptor*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIGNALDESCRIPTOR_M_H

