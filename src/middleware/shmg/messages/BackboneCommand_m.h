//
// Generated file, do not edit! Created by opp_msgtool 6.0 from middleware/shmg/messages/BackboneCommand.msg.
//

#ifndef __BACKBONECOMMAND_M_H
#define __BACKBONECOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class BackboneCommand;
/**
 * Class generated from <tt>middleware/shmg/messages/BackboneCommand.msg:16</tt> by opp_msgtool.
 * <pre>
 * packet BackboneCommand
 * {
 *     int srcEncapsulatedPkt;
 *     int destEncapsulatedPkt;
 *     int seqNum;
 *     bool useControlCellInTSCH;
 * }
 * </pre>
 */
class BackboneCommand : public ::omnetpp::cPacket
{
  protected:
    int srcEncapsulatedPkt = 0;
    int destEncapsulatedPkt = 0;
    int seqNum = 0;
    bool useControlCellInTSCH = false;

  private:
    void copy(const BackboneCommand& other);

  protected:
    bool operator==(const BackboneCommand&) = delete;

  public:
    BackboneCommand(const char *name=nullptr, short kind=0);
    BackboneCommand(const BackboneCommand& other);
    virtual ~BackboneCommand();
    BackboneCommand& operator=(const BackboneCommand& other);
    virtual BackboneCommand *dup() const override {return new BackboneCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcEncapsulatedPkt() const;
    virtual void setSrcEncapsulatedPkt(int srcEncapsulatedPkt);

    virtual int getDestEncapsulatedPkt() const;
    virtual void setDestEncapsulatedPkt(int destEncapsulatedPkt);

    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);

    virtual bool getUseControlCellInTSCH() const;
    virtual void setUseControlCellInTSCH(bool useControlCellInTSCH);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BackboneCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BackboneCommand& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline BackboneCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<BackboneCommand*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __BACKBONECOMMAND_M_H

